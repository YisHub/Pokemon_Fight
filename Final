
from pprint import pprint

from pydoc import plain

import random

from pokeload import get_all_pokemon





def get_player_profile(pokemon_list):

    return  {

        "player_name": input("Your name is... "),

        "pokemon_inventory": [random.choice(pokemon_list) for a in range(3)],

        "combats": 0,

        "pokeballs": 0,

        "health_potion": 0,

    }



def any_player_pokemon_lives(player_profile):

    return sum([pokemon["current_health"] for pokemon in player_profile["pokemon_inventory"]]) > 0



def choose_pokemon(player_profile):

    chosen = None

    while not chosen:

        print("Elige pokemon")

        for index in range(len(player_profile["pokemon_inventory"])):

            print("{} - {}".format(index,get_pokemon_info(player_profile["pokemon_inventory"][index])))



        try:

           return player_profile["pokemon_inventory"][int(input("¿Cual eliges? "))]

        except (ValueError, IndexError):

            print("Opción Invalida")





def get_pokemon_info(pokemon):

    return "{} | lvl {} | hp {}/{}".format(pokemon["name"],

                                            pokemon["level"],

                                            pokemon["current_health"],

                                            pokemon["base_health"])



def player_attack(player_pokemon, enemy_pokemon):

    """ Implementar multiplicadores en base al tipo

    Normal: débil frente a Lucha

    Fuego: débil frente a Agua, Tierra, Roca

    Agua: débil frente a Planta, Eléctrico

    Planta: débil frente a Fuego, Hielo, Veneno, Volador, Bicho

    Eléctrico: débil frente a Tierra

    Hielo: débil frente a Fuego, Lucha, Roca, Acero

    Lucha: débil frente a Volador, Psíquico, Hada

    Veneno: débil frente a Tierra, Psíquico

    Tierra: débil frente a Agua, Planta, Hielo

    Volador: débil frente a Eléctrico, Hielo, Roca

    Psíquico: débil frente a Bicho, Fantasma, Siniestro

    Bicho: débil frente a Volador, Roca, Fuego

    Roca: débil frente a Agua, Planta, Lucha, Tierra, Acero

    Fantasma: débil frente a Fantasma, Siniestro

    Dragón: débil frente a Hielo, Dragón, Hada

    Siniestro: débil frente a Lucha, Bicho, Hada

    Acero: débil frente a Fuego, Lucha, Tierra

    Hada: débil frente a Veneno, Acero

    """

    #cuando se elige el ataque del usuario, solo se muestran movimientos disponibles a ese level

    pass



def enemy_attack(enemy_pokemon, player_pokemon):

    pass



def assign_exp(attack_history):

    for pokemon in attack_history:

        points = random.randint(1, 5)

        pokemon["current_exp"] += points

    while pokemon["current_exp"] > 20:

        pokemon["current_exp"] -= 20

        pokemon["level"] += 1

        pokemon["current_health"] = pokemon["base_health"]

        print("Tu pokemon ha subido al nivel {}".format(get_pokemon_info(pokemon)))



def cure_pokemon(player_profile, player_pokemon):

    pass

def capture_with_pokeball(player_profile, enemy_pokemon):

    pass



def fight(player_profile, enemy_pokemon):

    print("--- NUEVO COMBATE ---")

    attack_history = []

    player_pokemon = choose_pokemon(player_profile)

    print("Contrincantes: {} vs {}".format(get_pokemon_info(player_profile),

                                            get_pokemon_info(enemy_pokemon)))



    while any_player_pokemon_lives(player_profile) and enemy_pokemon["current_health"] > 0:

        action = None

        while action not in ["A", "P", "V", "C"]:

            action = input("¿Que deseas hacer?: [A]tacar, [P]okeball, Poción de [V]ida, [C]ambiar")

        if action == "A":

            player_attack(player_pokemon, enemy_pokemon)

            attack_history.append(player_pokemon)



        elif action == "V":

            #Si el usuario tiene curas en el inventario, se aplica 50, hasta llegar a 100ps

            #Si el usuario no tiene no cura

            cure_pokemon(player_profile, player_pokemon)

        elif action == "P":

            #Si el usuario tiene pokeballs en el inventario, capturara, con cierta probabilidad

            #relativa a la salud restante del pokemon, cuando se captura, pasa al inventario con la misma salud y toh.

            capture_with_pokeball(player_profile, enemy_pokemon)



        elif action == "C":

            player_pokemon = choose_pokemon(player_profile)

        enemy_attack(enemy_pokemon, player_pokemon)

        if player_pokemon["current_health"] == 0 and any_player_pokemon_lives(player_profile):

            player_pokemon = choose_pokemon(player_profile)



    if any_player_pokemon_lives(player_profile) == 0:

        print("You win")

        assign_exp(attack_history)









    print("--- FIN DEL COMBATE ---")

    input("PRESS ENTER FOR CONTINUE")

def item_lottery(player_profile):

    """ Segun factor aleatorio, al player, le puede tocar una cura o pokeball después de cada combate """

def main():

    pokemon_list = get_all_pokemon()

    player_profile = get_player_profile()

    while any_player_pokemon_lives(player_profile):

        enemy_pokemon = random.choice(pokemon_list)

        fight(player_profile, enemy_pokemon)

        item_lottery(player_profile)

    print("Has perdido en el combate n{}".format(player_profile["combats"]))







if __name__ == "__main__":

    main(